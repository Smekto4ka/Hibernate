<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="216" passed="216">
  <reporter-output>
  </reporter-output>
  <suite name="AllTests - examples" duration-ms="138443" started-at="2021-05-01T09:47:59Z" finished-at="2021-05-01T09:50:17Z">
    <groups>
      <group name="MYSQL">
        <method signature="Locking.extendedLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="extendedLock" class="org.jpwh.test.concurrency.Locking"/>
        <method signature="CreateExecuteQueries.createNamedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="createNamedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.namedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="namedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.queryHints()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="queryHints" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="BulkStatementsSQL.bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="bulkUpdate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdateHibernate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="bulkUpdateHibernate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
      </group> <!-- MYSQL -->
      <group name="H2">
        <method signature="SimpleTransitions.replicate()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="replicate" class="org.jpwh.test.simple.SimpleTransitions"/>
        <method signature="TablePerClass.jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="jdbcBillingDetailsSqlQuery" class="org.jpwh.test.inheritance.TablePerClass"/>
        <method signature="GeneratedProperties.storeLoadLastModified()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@4439f31e]" name="storeLoadLastModified" class="org.jpwh.test.advanced.GeneratedProperties"/>
        <method signature="CustomSchema.configurePersistenceUnit()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="configurePersistenceUnit" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadCheckColumnInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadCheckColumnInvalid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadCheckSingleRowInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadCheckSingleRowInvalid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadCheckSubselectValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadCheckSubselectValid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadDomainInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadDomainInvalid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadUniqueMultiColumnValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadUniqueMultiColumnValid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadValid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="Locking.extendedLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="extendedLock" class="org.jpwh.test.concurrency.Locking"/>
        <method signature="NonTransactional.autoCommit()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f49dace]" name="autoCommit" class="org.jpwh.test.concurrency.NonTransactional"/>
        <method signature="ExtendedPC.conversationCreateItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="conversationCreateItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="ExtendedPC.conversationEditItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="conversationEditItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="CreateExecuteQueries.createNamedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="createNamedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.namedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="namedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.queryHints()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="queryHints" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="HibernateSQLQueries.executeRecursiveQueries()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@458c1321]" name="executeRecursiveQueries" class="org.jpwh.test.querying.sql.HibernateSQLQueries"/>
        <method signature="NativeQueries.executeRecursiveQueries()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@1877ab81]" name="executeRecursiveQueries" class="org.jpwh.test.querying.sql.NativeQueries"/>
        <method signature="Projection.executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@1563da5]" name="executeQueriesWithFunctions" class="org.jpwh.test.querying.criteria.Projection"/>
        <method signature="Projection.executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@3cb1ffe6]" name="executeQueriesWithFunctions" class="org.jpwh.test.querying.jpql.Projection"/>
        <method signature="Restriction.executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2781e022]" name="executeQueriesWithFunctions" class="org.jpwh.test.querying.criteria.Restriction"/>
        <method signature="Restriction.executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@704a52ec]" name="executeQueriesWithFunctions" class="org.jpwh.test.querying.jpql.Restriction"/>
        <method signature="CustomSQL.readRestrictedCollection()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="readRestrictedCollection" class="org.jpwh.test.customsql.CustomSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="bulkUpdate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdateHibernate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="bulkUpdateHibernate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
      </group> <!-- H2 -->
      <group name="POSTGRESQL">
        <method signature="SimpleTransitions.replicate()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="replicate" class="org.jpwh.test.simple.SimpleTransitions"/>
        <method signature="TablePerClass.jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="jdbcBillingDetailsSqlQuery" class="org.jpwh.test.inheritance.TablePerClass"/>
        <method signature="NonTransactional.autoCommit()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f49dace]" name="autoCommit" class="org.jpwh.test.concurrency.NonTransactional"/>
        <method signature="ExtendedPC.conversationCreateItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="conversationCreateItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="ExtendedPC.conversationEditItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="conversationEditItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="CustomSQL.readRestrictedCollection()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="readRestrictedCollection" class="org.jpwh.test.customsql.CustomSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="bulkUpdate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdateHibernate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="bulkUpdateHibernate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
      </group> <!-- POSTGRESQL -->
      <group name="ORACLE">
        <method signature="SimpleTransitions.replicate()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="replicate" class="org.jpwh.test.simple.SimpleTransitions"/>
        <method signature="Locking.extendedLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="extendedLock" class="org.jpwh.test.concurrency.Locking"/>
        <method signature="NonTransactional.autoCommit()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f49dace]" name="autoCommit" class="org.jpwh.test.concurrency.NonTransactional"/>
        <method signature="ExtendedPC.conversationCreateItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="conversationCreateItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="ExtendedPC.conversationEditItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="conversationEditItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="CreateExecuteQueries.createNamedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="createNamedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.namedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="namedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.queryHints()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="queryHints" class="org.jpwh.test.querying.CreateExecuteQueries"/>
      </group> <!-- ORACLE -->
    </groups>
    <test name="Hello World" duration-ms="1211" started-at="2021-05-01T09:47:59Z" finished-at="2021-05-01T09:48:00Z">
      <class name="org.jpwh.helloworld.HelloWorldJPA">
        <test-method status="PASS" signature="storeLoadMessage()[pri:0, instance:org.jpwh.helloworld.HelloWorldJPA@17f6480]" name="storeLoadMessage" duration-ms="378" started-at="2021-05-01T12:48:00Z" finished-at="2021-05-01T12:48:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadMessage -->
      </class> <!-- org.jpwh.helloworld.HelloWorldJPA -->
      <class name="org.jpwh.helloworld.HelloWorldHibernate">
        <test-method status="PASS" signature="storeLoadMessage()[pri:0, instance:org.jpwh.helloworld.HelloWorldHibernate@3d8c7aca]" name="storeLoadMessage" duration-ms="824" started-at="2021-05-01T12:47:59Z" finished-at="2021-05-01T12:48:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadMessage -->
      </class> <!-- org.jpwh.helloworld.HelloWorldHibernate -->
    </test> <!-- Hello World -->
    <test name="Simple Mappings" duration-ms="4942" started-at="2021-05-01T09:48:05Z" finished-at="2021-05-01T09:48:10Z">
      <class name="org.jpwh.test.simple.CRUDMetadataXML">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataXML@50f8360d]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:48:05Z" finished-at="2021-05-01T12:48:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataXML@50f8360d]" name="beforeMethod" is-config="true" duration-ms="327" started-at="2021-05-01T12:48:05Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndQueryItems()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataXML@50f8360d]" name="storeAndQueryItems" duration-ms="31" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndQueryItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataXML@50f8360d]" name="afterMethod" is-config="true" duration-ms="50" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.CRUDMetadataXML -->
      <class name="org.jpwh.test.simple.CRUD">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.CRUD@52af6cff]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUD@52af6cff]" name="beforeMethod" is-config="true" duration-ms="100" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndQueryItems()[pri:0, instance:org.jpwh.test.simple.CRUD@52af6cff]" name="storeAndQueryItems" duration-ms="5" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndQueryItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUD@52af6cff]" name="afterMethod" is-config="true" duration-ms="34" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.CRUD -->
      <class name="org.jpwh.test.simple.SimpleTransitions">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="122" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="basicUOW()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="basicUOW" duration-ms="4" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basicUOW -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="67" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="188" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="detach()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="detach" duration-ms="6" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- detach -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="39" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="118" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="flushModeType()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="flushModeType" duration-ms="9" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushModeType -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="48" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="109" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="makePersistent()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="makePersistent" duration-ms="5" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- makePersistent -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="52" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="107" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="makeTransient()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="makeTransient" duration-ms="9" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- makeTransient -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="34" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="104" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="mergeDetached()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="mergeDetached" duration-ms="9" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mergeDetached -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="35" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="104" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="refresh()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="refresh" duration-ms="33" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refresh -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="47" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="175" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="replicate()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="replicate" duration-ms="11" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- replicate -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="70" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="99" started-at="2021-05-01T12:48:08Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="retrievePersistent()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="retrievePersistent" duration-ms="8" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrievePersistent -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="34" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="97" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="retrievePersistentReference()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="retrievePersistentReference" duration-ms="4" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <exception class="org.hibernate.LazyInitializationException">
            <message>
              <![CDATA[could not initialize proxy - no Session]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.LazyInitializationException: could not initialize proxy - no Session
	at org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:148)
	at org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:266)
	at org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer.invoke(JavassistLazyInitializer.java:68)
	at org.jpwh.model.simple.Item_$$_jvstba_1.getName(Item_$$_jvstba_1.java)
	at org.jpwh.test.simple.SimpleTransitions.retrievePersistentReference(SimpleTransitions.java:203)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.LazyInitializationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrievePersistentReference -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="33" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="beforeMethod" is-config="true" duration-ms="97" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="scopeOfIdentity()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="scopeOfIdentity" duration-ms="6" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- scopeOfIdentity -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@9f70c54]" name="afterMethod" is-config="true" duration-ms="32" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.SimpleTransitions -->
      <class name="org.jpwh.test.simple.CRUDMetadataHBMXML">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataHBMXML@61dc03ce]" name="beforeMethod" is-config="true" duration-ms="617" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataHBMXML@61dc03ce]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeAndQueryItems()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataHBMXML@61dc03ce]" name="storeAndQueryItems" duration-ms="8" started-at="2021-05-01T12:48:10Z" finished-at="2021-05-01T12:48:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndQueryItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataHBMXML@61dc03ce]" name="afterMethod" is-config="true" duration-ms="78" started-at="2021-05-01T12:48:10Z" finished-at="2021-05-01T12:48:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.CRUDMetadataHBMXML -->
      <class name="org.jpwh.test.simple.AccessJPAMetamodel">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="beforeMethod" is-config="true" duration-ms="127" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="accessDynamicMetamodel()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="accessDynamicMetamodel" duration-ms="0" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accessDynamicMetamodel -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="afterMethod" is-config="true" duration-ms="59" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="beforeMethod" is-config="true" duration-ms="102" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="accessStaticMetamodel()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="accessStaticMetamodel" duration-ms="0" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accessStaticMetamodel -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="afterMethod" is-config="true" duration-ms="35" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="beforeMethod" is-config="true" duration-ms="97" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="queryStaticMetamodel()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="queryStaticMetamodel" duration-ms="30" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryStaticMetamodel -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@5a61f5df]" name="afterMethod" is-config="true" duration-ms="33" started-at="2021-05-01T12:48:07Z" finished-at="2021-05-01T12:48:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.AccessJPAMetamodel -->
      <class name="org.jpwh.test.simple.MappingManyToOne">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.MappingManyToOne@531be3c5]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.MappingManyToOne@531be3c5]" name="beforeMethod" is-config="true" duration-ms="224" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadBids()[pri:0, instance:org.jpwh.test.simple.MappingManyToOne@531be3c5]" name="storeAndLoadBids" duration-ms="21" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.MappingManyToOne@531be3c5]" name="afterMethod" is-config="true" duration-ms="59" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.MappingManyToOne -->
      <class name="org.jpwh.test.simple.ModelOperations">
        <test-method status="PASS" signature="linkBidAndItem()[pri:0, instance:org.jpwh.test.simple.ModelOperations@36f6e879]" name="linkBidAndItem" duration-ms="1" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkBidAndItem -->
        <test-method status="PASS" signature="validateItem()[pri:0, instance:org.jpwh.test.simple.ModelOperations@36f6e879]" name="validateItem" duration-ms="242" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateItem -->
      </class> <!-- org.jpwh.test.simple.ModelOperations -->
      <class name="org.jpwh.test.simple.CRUDMetadataOverrideXML">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@3551a94]" name="beforeMethod" is-config="true" duration-ms="189" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@3551a94]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@3551a94]" name="afterMethod" is-config="true" duration-ms="62" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="checkMetadataOverride()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@3551a94]" name="checkMetadataOverride" duration-ms="0" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkMetadataOverride -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@3551a94]" name="beforeMethod" is-config="true" duration-ms="156" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndQueryItems()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@3551a94]" name="storeAndQueryItems" duration-ms="11" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndQueryItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@3551a94]" name="afterMethod" is-config="true" duration-ms="48" started-at="2021-05-01T12:48:06Z" finished-at="2021-05-01T12:48:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.CRUDMetadataOverrideXML -->
      <class name="org.jpwh.test.simple.MappingEmbeddables">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@737996a0]" name="beforeMethod" is-config="true" duration-ms="100" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@737996a0]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeAndLoadInvalidUsers()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@737996a0]" name="storeAndLoadInvalidUsers" duration-ms="11" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.simple.MappingEmbeddables.storeAndLoadInvalidUsers(MappingEmbeddables.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Значение NULL не разрешено для поля "CITY"
NULL not allowed for column "CITY"; SQL statement:
/* insert org.jpwh.model.simple.User */ insert into USERS (BILLING_CITY, BILLING_STREET, BILLING_ZIPCODE, city, street, zipcode, username, id) values (?, ?, ?, ?, ?, ?, ?, ?) [23502-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:293)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:692)
	at org.h2.command.dml.Insert.insertRows(Insert.java:120)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy18.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadInvalidUsers -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@737996a0]" name="afterMethod" is-config="true" duration-ms="33" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@737996a0]" name="beforeMethod" is-config="true" duration-ms="95" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadUsers()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@737996a0]" name="storeAndLoadUsers" duration-ms="4" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsers -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@737996a0]" name="afterMethod" is-config="true" duration-ms="31" started-at="2021-05-01T12:48:09Z" finished-at="2021-05-01T12:48:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.MappingEmbeddables -->
    </test> <!-- Simple Mappings -->
    <test name="Inheritance Mappings" duration-ms="5905" started-at="2021-05-01T09:48:10Z" finished-at="2021-05-01T09:48:16Z">
      <class name="org.jpwh.test.inheritance.Joined">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="beforeMethod" is-config="true" duration-ms="89" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="storeBillingDetailsLoadCreditCards" duration-ms="7" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="afterMethod" is-config="true" duration-ms="28" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="beforeMethod" is-config="true" duration-ms="80" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="jdbcBillingDetailsSqlQuery" duration-ms="7" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="beforeMethod" is-config="true" duration-ms="82" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="jdbcCreditCardSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="jdbcCreditCardSqlQuery" duration-ms="7" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcCreditCardSqlQuery -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="afterMethod" is-config="true" duration-ms="30" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="beforeMethod" is-config="true" duration-ms="108" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="storeLoadBillingDetails" duration-ms="7" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@2669b199]" name="afterMethod" is-config="true" duration-ms="39" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.Joined -->
      <class name="org.jpwh.test.inheritance.PolymorphicOneToMany">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicOneToMany@6574b225]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicOneToMany@6574b225]" name="beforeMethod" is-config="true" duration-ms="129" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicOneToMany@6574b225]" name="storeAndLoadItemBids" duration-ms="22" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicOneToMany@6574b225]" name="afterMethod" is-config="true" duration-ms="31" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.PolymorphicOneToMany -->
      <class name="org.jpwh.test.inheritance.TablePerClass">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="beforeMethod" is-config="true" duration-ms="82" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="storeBillingDetailsLoadCreditCards" duration-ms="7" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="jdbcBillingDetailsSqlQuery" duration-ms="7" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="beforeMethod" is-config="true" duration-ms="79" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="storeLoadBillingDetails" duration-ms="6" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@b97c004]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.TablePerClass -->
      <class name="org.jpwh.test.inheritance.Embeddable">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.Embeddable@5056dfcb]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Embeddable@5056dfcb]" name="beforeMethod" is-config="true" duration-ms="82" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoad()[pri:0, instance:org.jpwh.test.inheritance.Embeddable@5056dfcb]" name="storeAndLoad" duration-ms="8" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoad -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Embeddable@5056dfcb]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.Embeddable -->
      <class name="org.jpwh.test.inheritance.MixedFetchSelect">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:48:13Z" finished-at="2021-05-01T12:48:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="beforeMethod" is-config="true" duration-ms="706" started-at="2021-05-01T12:48:13Z" finished-at="2021-05-01T12:48:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="storeBillingDetailsLoadCreditCards" duration-ms="6" started-at="2021-05-01T12:48:13Z" finished-at="2021-05-01T12:48:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="afterMethod" is-config="true" duration-ms="224" started-at="2021-05-01T12:48:13Z" finished-at="2021-05-01T12:48:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="beforeMethod" is-config="true" duration-ms="656" started-at="2021-05-01T12:48:14Z" finished-at="2021-05-01T12:48:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="jdbcBillingDetailsSqlQuery" duration-ms="6" started-at="2021-05-01T12:48:14Z" finished-at="2021-05-01T12:48:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="afterMethod" is-config="true" duration-ms="243" started-at="2021-05-01T12:48:14Z" finished-at="2021-05-01T12:48:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="beforeMethod" is-config="true" duration-ms="1031" started-at="2021-05-01T12:48:14Z" finished-at="2021-05-01T12:48:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="storeLoadBillingDetails" duration-ms="10" started-at="2021-05-01T12:48:15Z" finished-at="2021-05-01T12:48:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@5cc7c2a6]" name="afterMethod" is-config="true" duration-ms="289" started-at="2021-05-01T12:48:15Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.MixedFetchSelect -->
      <class name="org.jpwh.test.inheritance.MappedSuperclass">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:48:10Z" finished-at="2021-05-01T12:48:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="beforeMethod" is-config="true" duration-ms="136" started-at="2021-05-01T12:48:10Z" finished-at="2021-05-01T12:48:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="storeBillingDetailsLoadCreditCards" duration-ms="6" started-at="2021-05-01T12:48:10Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="beforeMethod" is-config="true" duration-ms="79" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="jdbcSqlQueryBankAccount()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="jdbcSqlQueryBankAccount" duration-ms="8" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcSqlQueryBankAccount -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="beforeMethod" is-config="true" duration-ms="79" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="jdbcSqlQueryCreditCard()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="jdbcSqlQueryCreditCard" duration-ms="7" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcSqlQueryCreditCard -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="afterMethod" is-config="true" duration-ms="42" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="beforeMethod" is-config="true" duration-ms="79" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="storeLoadBillingDetails" duration-ms="6" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@458ad742]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.MappedSuperclass -->
      <class name="org.jpwh.test.inheritance.Mixed">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="beforeMethod" is-config="true" duration-ms="134" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="storeBillingDetailsLoadCreditCards" duration-ms="6" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="afterMethod" is-config="true" duration-ms="28" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="beforeMethod" is-config="true" duration-ms="79" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="jdbcBillingDetailsSqlQuery" duration-ms="6" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:48:12Z" finished-at="2021-05-01T12:48:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="storeLoadBillingDetails" duration-ms="5" started-at="2021-05-01T12:48:13Z" finished-at="2021-05-01T12:48:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@2344fc66]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:13Z" finished-at="2021-05-01T12:48:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.Mixed -->
      <class name="org.jpwh.test.inheritance.PolymorphicManyToOne">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicManyToOne@32e6e9c3]" name="beforeMethod" is-config="true" duration-ms="115" started-at="2021-05-01T12:48:10Z" finished-at="2021-05-01T12:48:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicManyToOne@32e6e9c3]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:10Z" finished-at="2021-05-01T12:48:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicManyToOne@32e6e9c3]" name="storeAndLoadItemBids" duration-ms="14" started-at="2021-05-01T12:48:10Z" finished-at="2021-05-01T12:48:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicManyToOne@32e6e9c3]" name="afterMethod" is-config="true" duration-ms="38" started-at="2021-05-01T12:48:10Z" finished-at="2021-05-01T12:48:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.PolymorphicManyToOne -->
      <class name="org.jpwh.test.inheritance.SingleTable">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="beforeMethod" is-config="true" duration-ms="86" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="storeBillingDetailsLoadCreditCards" duration-ms="5" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="beforeMethod" is-config="true" duration-ms="79" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="jdbcBillingDetailsSqlQuery" duration-ms="7" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="afterMethod" is-config="true" duration-ms="38" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="beforeMethod" is-config="true" duration-ms="117" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="jdbcCreditCardSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="jdbcCreditCardSqlQuery" duration-ms="7" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcCreditCardSqlQuery -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="beforeMethod" is-config="true" duration-ms="80" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="storeLoadBillingDetails" duration-ms="6" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@4590c9c3]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:11Z" finished-at="2021-05-01T12:48:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.SingleTable -->
    </test> <!-- Inheritance Mappings -->
    <test name="Advanced Mappings" duration-ms="2358" started-at="2021-05-01T09:48:16Z" finished-at="2021-05-01T09:48:18Z">
      <class name="org.jpwh.test.advanced.GeneratedProperties">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@4439f31e]" name="beforeMethod" is-config="true" duration-ms="104" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@4439f31e]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadInitialPrice()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@4439f31e]" name="storeLoadInitialPrice" duration-ms="8" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadInitialPrice -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@4439f31e]" name="afterMethod" is-config="true" duration-ms="35" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@4439f31e]" name="beforeMethod" is-config="true" duration-ms="91" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadLastModified()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@4439f31e]" name="storeLoadLastModified" duration-ms="9" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadLastModified -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@4439f31e]" name="afterMethod" is-config="true" duration-ms="34" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.GeneratedProperties -->
      <class name="org.jpwh.test.advanced.TransformingColumns">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.TransformingColumns@5f375618]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.TransformingColumns@5f375618]" name="beforeMethod" is-config="true" duration-ms="140" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadTransform()[pri:0, instance:org.jpwh.test.advanced.TransformingColumns@5f375618]" name="storeLoadTransform" duration-ms="9" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadTransform -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.TransformingColumns@5f375618]" name="afterMethod" is-config="true" duration-ms="29" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.TransformingColumns -->
      <class name="org.jpwh.test.advanced.Temporal">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.Temporal@5dfcfece]" name="beforeMethod" is-config="true" duration-ms="86" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.Temporal@5dfcfece]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadTemporal()[pri:0, instance:org.jpwh.test.advanced.Temporal@5dfcfece]" name="storeLoadTemporal" duration-ms="4" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadTemporal -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.Temporal@5dfcfece]" name="afterMethod" is-config="true" duration-ms="28" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.Temporal -->
      <class name="org.jpwh.test.advanced.AccessType">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.AccessType@56f4468b]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.AccessType@56f4468b]" name="beforeMethod" is-config="true" duration-ms="128" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadAccessType()[pri:0, instance:org.jpwh.test.advanced.AccessType@56f4468b]" name="storeLoadAccessType" duration-ms="11" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadAccessType -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.AccessType@56f4468b]" name="afterMethod" is-config="true" duration-ms="39" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.AccessType -->
      <class name="org.jpwh.test.advanced.Enum">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.Enum@5d5eef3d]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.Enum@5d5eef3d]" name="beforeMethod" is-config="true" duration-ms="84" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadEnum()[pri:0, instance:org.jpwh.test.advanced.Enum@5d5eef3d]" name="storeLoadEnum" duration-ms="5" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadEnum -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.Enum@5d5eef3d]" name="afterMethod" is-config="true" duration-ms="29" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.Enum -->
      <class name="org.jpwh.test.converter.UserTypes">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.converter.UserTypes@6cc4c815]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.converter.UserTypes@6cc4c815]" name="beforeMethod" is-config="true" duration-ms="93" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadMonetaryAmount()[pri:0, instance:org.jpwh.test.converter.UserTypes@6cc4c815]" name="storeLoadMonetaryAmount" duration-ms="8" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadMonetaryAmount -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.converter.UserTypes@6cc4c815]" name="afterMethod" is-config="true" duration-ms="31" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.converter.UserTypes -->
      <class name="org.jpwh.test.advanced.BooleanOverride">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@100fc185]" name="beforeMethod" is-config="true" duration-ms="109" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="configurePersistenceUnit()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@100fc185]" name="configurePersistenceUnit" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configurePersistenceUnit -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@100fc185]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadOverride()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@100fc185]" name="storeLoadOverride" duration-ms="5" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadOverride -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@100fc185]" name="afterMethod" is-config="true" duration-ms="37" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.BooleanOverride -->
      <class name="org.jpwh.test.advanced.LazyProperties">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@215be6bb]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@215be6bb]" name="beforeMethod" is-config="true" duration-ms="124" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadLocator()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@215be6bb]" name="storeLoadLocator" duration-ms="23" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadLocator -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@215be6bb]" name="afterMethod" is-config="true" duration-ms="36" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@215be6bb]" name="beforeMethod" is-config="true" duration-ms="95" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadProperties()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@215be6bb]" name="storeLoadProperties" duration-ms="7" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadProperties -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@215be6bb]" name="afterMethod" is-config="true" duration-ms="82" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.LazyProperties -->
      <class name="org.jpwh.test.advanced.DerivedProperties">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@32d992b2]" name="beforeMethod" is-config="true" duration-ms="88" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@32d992b2]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadFormula()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@32d992b2]" name="storeLoadFormula" duration-ms="9" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadFormula -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@32d992b2]" name="afterMethod" is-config="true" duration-ms="29" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@32d992b2]" name="beforeMethod" is-config="true" duration-ms="85" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadFormulaSubselect()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@32d992b2]" name="storeLoadFormulaSubselect" duration-ms="7" started-at="2021-05-01T12:48:16Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadFormulaSubselect -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@32d992b2]" name="afterMethod" is-config="true" duration-ms="39" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.DerivedProperties -->
      <class name="org.jpwh.test.converter.Converters">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.converter.Converters@23ceabc1]" name="beforeMethod" is-config="true" duration-ms="126" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.converter.Converters@23ceabc1]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeAndLoadZipcode()[pri:0, instance:org.jpwh.test.converter.Converters@23ceabc1]" name="storeAndLoadZipcode" duration-ms="11" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadZipcode -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.converter.Converters@23ceabc1]" name="afterMethod" is-config="true" duration-ms="28" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.converter.Converters@23ceabc1]" name="beforeMethod" is-config="true" duration-ms="80" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadMonetaryAmount()[pri:0, instance:org.jpwh.test.converter.Converters@23ceabc1]" name="storeLoadMonetaryAmount" duration-ms="53" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadMonetaryAmount -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.converter.Converters@23ceabc1]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.converter.Converters -->
      <class name="org.jpwh.test.advanced.MappedSubselect">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.MappedSubselect@3a82f6ef]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.MappedSubselect@3a82f6ef]" name="beforeMethod" is-config="true" duration-ms="92" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="loadSubselectEntity()[pri:0, instance:org.jpwh.test.advanced.MappedSubselect@3a82f6ef]" name="loadSubselectEntity" duration-ms="16" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadSubselectEntity -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.MappedSubselect@3a82f6ef]" name="afterMethod" is-config="true" duration-ms="31" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.MappedSubselect -->
      <class name="org.jpwh.test.advanced.NestedComponents">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.NestedComponents@1810399e]" name="beforeMethod" is-config="true" duration-ms="81" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.NestedComponents@1810399e]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeAndLoadUsers()[pri:0, instance:org.jpwh.test.advanced.NestedComponents@1810399e]" name="storeAndLoadUsers" duration-ms="3" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsers -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.NestedComponents@1810399e]" name="afterMethod" is-config="true" duration-ms="29" started-at="2021-05-01T12:48:17Z" finished-at="2021-05-01T12:48:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.NestedComponents -->
    </test> <!-- Advanced Mappings -->
    <test name="Collections/Associations" duration-ms="4203" started-at="2021-05-01T09:48:18Z" finished-at="2021-05-01T09:48:23Z">
      <class name="org.jpwh.test.associations.ManyToManyLinkEntity">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.ManyToManyLinkEntity@6f7fd0e6]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyLinkEntity@6f7fd0e6]" name="beforeMethod" is-config="true" duration-ms="95" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCategoryItems()[pri:0, instance:org.jpwh.test.associations.ManyToManyLinkEntity@6f7fd0e6]" name="storeLoadCategoryItems" duration-ms="11" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCategoryItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyLinkEntity@6f7fd0e6]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.ManyToManyLinkEntity -->
      <class name="org.jpwh.test.associations.OneToManyCascadePersist">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadePersist@47c62251]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadePersist@47c62251]" name="beforeMethod" is-config="true" duration-ms="72" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadePersist@47c62251]" name="storeAndLoadItemBids" duration-ms="7" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadePersist@47c62251]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyCascadePersist -->
      <class name="org.jpwh.test.collections.BagOfStrings">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.BagOfStrings@4b9e13df]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.BagOfStrings@4b9e13df]" name="beforeMethod" is-config="true" duration-ms="122" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.BagOfStrings@4b9e13df]" name="storeLoadCollection" duration-ms="3" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.BagOfStrings@4b9e13df]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.BagOfStrings -->
      <class name="org.jpwh.test.collections.EmbeddableSetOfStrings">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.EmbeddableSetOfStrings@59f99ea]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.EmbeddableSetOfStrings@59f99ea]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.EmbeddableSetOfStrings@59f99ea]" name="storeLoadCollection" duration-ms="5" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.EmbeddableSetOfStrings@59f99ea]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.EmbeddableSetOfStrings -->
      <class name="org.jpwh.test.collections.SetOfEmbeddablesOrderBy">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddablesOrderBy@61832929]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddablesOrderBy@61832929]" name="beforeMethod" is-config="true" duration-ms="78" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddablesOrderBy@61832929]" name="storeLoadCollection" duration-ms="4" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddablesOrderBy@61832929]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SetOfEmbeddablesOrderBy -->
      <class name="org.jpwh.test.collections.MapOfStrings">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStrings@26be92ad]" name="beforeMethod" is-config="true" duration-ms="119" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.MapOfStrings@26be92ad]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.MapOfStrings@26be92ad]" name="storeLoadCollection" duration-ms="3" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStrings@26be92ad]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.MapOfStrings -->
      <class name="org.jpwh.test.associations.OneToOneForeignKey">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3ffc5af1]" name="beforeMethod" is-config="true" duration-ms="72" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3ffc5af1]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeAndLoadUserAddress()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3ffc5af1]" name="storeAndLoadUserAddress" duration-ms="4" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUserAddress -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3ffc5af1]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3ffc5af1]" name="beforeMethod" is-config="true" duration-ms="69" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeNonUniqueRelationship()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3ffc5af1]" name="storeNonUniqueRelationship" duration-ms="3" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.associations.OneToOneForeignKey.storeNonUniqueRelationship(OneToOneForeignKey.java:80)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Нарушение уникального индекса или первичного ключа: "UK_OB48MBNFMUFD417FO9SWUHFBV_INDEX_4 ON PUBLIC.USERS(SHIPPINGADDRESS_ID)"
Unique index or primary key violation: "UK_OB48MBNFMUFD417FO9SWUHFBV_INDEX_4 ON PUBLIC.USERS(SHIPPINGADDRESS_ID)"; SQL statement:
/* insert org.jpwh.model.associations.onetoone.foreignkey.User */ insert into USERS (shippingAddress_id, username, id) values (?, ?, ?) [23505-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.index.BaseIndex.getDuplicateKeyException(BaseIndex.java:82)
	at org.h2.index.TreeIndex.add(TreeIndex.java:62)
	at org.h2.table.RegularTable.addRow(RegularTable.java:122)
	at org.h2.command.dml.Insert.insertRows(Insert.java:124)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy18.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeNonUniqueRelationship -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3ffc5af1]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToOneForeignKey -->
      <class name="org.jpwh.test.collections.MapOfStringsEmbeddables">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStringsEmbeddables@5e5792a0]" name="beforeMethod" is-config="true" duration-ms="69" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.MapOfStringsEmbeddables@5e5792a0]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.MapOfStringsEmbeddables@5e5792a0]" name="storeLoadCollection" duration-ms="13" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStringsEmbeddables@5e5792a0]" name="afterMethod" is-config="true" duration-ms="22" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.MapOfStringsEmbeddables -->
      <class name="org.jpwh.test.associations.MapsMapKey">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.MapsMapKey@28d25987]" name="beforeMethod" is-config="true" duration-ms="74" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.MapsMapKey@28d25987]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.MapsMapKey@28d25987]" name="storeAndLoadItemBids" duration-ms="6" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.MapsMapKey@28d25987]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.MapsMapKey -->
      <class name="org.jpwh.test.associations.MapsTernary">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.MapsTernary@4c70fda8]" name="beforeMethod" is-config="true" duration-ms="85" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.MapsTernary@4c70fda8]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadCategoryItems()[pri:0, instance:org.jpwh.test.associations.MapsTernary@4c70fda8]" name="storeLoadCategoryItems" duration-ms="8" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCategoryItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.MapsTernary@4c70fda8]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.MapsTernary -->
      <class name="org.jpwh.test.associations.OneToManyCascadeRemove">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadeRemove@27efef64]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadeRemove@27efef64]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadeRemove@27efef64]" name="storeAndLoadItemBids" duration-ms="27" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadeRemove@27efef64]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyCascadeRemove -->
      <class name="org.jpwh.test.collections.SetOfStrings">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SetOfStrings@d8355a8]" name="beforeMethod" is-config="true" duration-ms="74" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SetOfStrings@d8355a8]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SetOfStrings@d8355a8]" name="storeLoadCollection" duration-ms="4" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SetOfStrings@d8355a8]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SetOfStrings -->
      <class name="org.jpwh.test.collections.SortedMapOfStrings">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SortedMapOfStrings@c038203]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SortedMapOfStrings@c038203]" name="beforeMethod" is-config="true" duration-ms="85" started-at="2021-05-01T12:48:18Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SortedMapOfStrings@c038203]" name="storeLoadCollection" duration-ms="7" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SortedMapOfStrings@c038203]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SortedMapOfStrings -->
      <class name="org.jpwh.test.associations.OneToManyBag">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyBag@3e6fa38a]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyBag@3e6fa38a]" name="beforeMethod" is-config="true" duration-ms="81" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyBag@3e6fa38a]" name="storeAndLoadItemBids" duration-ms="11" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyBag@3e6fa38a]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyBag -->
      <class name="org.jpwh.test.collections.SetOfStringsOrderBy">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SetOfStringsOrderBy@55f3ddb1]" name="beforeMethod" is-config="true" duration-ms="72" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SetOfStringsOrderBy@55f3ddb1]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SetOfStringsOrderBy@55f3ddb1]" name="storeLoadCollection" duration-ms="3" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SetOfStringsOrderBy@55f3ddb1]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SetOfStringsOrderBy -->
      <class name="org.jpwh.test.associations.OneToManyEmbeddableJoinTable">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddableJoinTable@1d057a39]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddableJoinTable@1d057a39]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadUsersShipments()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddableJoinTable@1d057a39]" name="storeAndLoadUsersShipments" duration-ms="5" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsersShipments -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddableJoinTable@1d057a39]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyEmbeddableJoinTable -->
      <class name="org.jpwh.test.associations.OneToOneJoinTable">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@224edc67]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@224edc67]" name="beforeMethod" is-config="true" duration-ms="101" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadUserAddress()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@224edc67]" name="storeAndLoadUserAddress" duration-ms="6" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUserAddress -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@224edc67]" name="afterMethod" is-config="true" duration-ms="31" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@224edc67]" name="beforeMethod" is-config="true" duration-ms="96" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeNonUniqueRelationship()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@224edc67]" name="storeNonUniqueRelationship" duration-ms="8" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2829)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.associations.OneToOneJoinTable.storeNonUniqueRelationship(OneToOneJoinTable.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Нарушение уникального индекса или первичного ключа: "UK_EW9CIRVGSIAOHXF5NNVFBOS2V_INDEX_3 ON PUBLIC.ITEM_SHIPMENT(ITEM_ID)"
Unique index or primary key violation: "UK_EW9CIRVGSIAOHXF5NNVFBOS2V_INDEX_3 ON PUBLIC.ITEM_SHIPMENT(ITEM_ID)"; SQL statement:
/* insert org.jpwh.model.associations.onetoone.jointable.Shipment */ insert into ITEM_SHIPMENT (ITEM_ID, SHIPMENT_ID) values (?, ?) [23505-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.index.BaseIndex.getDuplicateKeyException(BaseIndex.java:82)
	at org.h2.index.TreeIndex.add(TreeIndex.java:62)
	at org.h2.table.RegularTable.addRow(RegularTable.java:122)
	at org.h2.command.dml.Insert.insertRows(Insert.java:124)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy18.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeNonUniqueRelationship -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@224edc67]" name="afterMethod" is-config="true" duration-ms="34" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToOneJoinTable -->
      <class name="org.jpwh.test.associations.OneToManyOnDeleteCascade">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyOnDeleteCascade@18be83e4]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyOnDeleteCascade@18be83e4]" name="beforeMethod" is-config="true" duration-ms="74" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyOnDeleteCascade@18be83e4]" name="storeAndLoadItemBids" duration-ms="10" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyOnDeleteCascade@18be83e4]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyOnDeleteCascade -->
      <class name="org.jpwh.test.collections.SortedSetOfStrings">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SortedSetOfStrings@ae45eb6]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SortedSetOfStrings@ae45eb6]" name="beforeMethod" is-config="true" duration-ms="70" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SortedSetOfStrings@ae45eb6]" name="storeLoadCollection" duration-ms="5" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SortedSetOfStrings@ae45eb6]" name="afterMethod" is-config="true" duration-ms="22" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SortedSetOfStrings -->
      <class name="org.jpwh.test.associations.OneToOneForeignGenerator">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignGenerator@523884b2]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignGenerator@523884b2]" name="beforeMethod" is-config="true" duration-ms="75" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadUserAddress()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignGenerator@523884b2]" name="storeAndLoadUserAddress" duration-ms="4" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUserAddress -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignGenerator@523884b2]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToOneForeignGenerator -->
      <class name="org.jpwh.test.associations.ManyToManyTernary">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyTernary@2b98378d]" name="beforeMethod" is-config="true" duration-ms="83" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.ManyToManyTernary@2b98378d]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadCategoryItems()[pri:0, instance:org.jpwh.test.associations.ManyToManyTernary@2b98378d]" name="storeLoadCategoryItems" duration-ms="11" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCategoryItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyTernary@2b98378d]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.ManyToManyTernary -->
      <class name="org.jpwh.test.associations.OneToManyList">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyList@4501b7af]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyList@4501b7af]" name="beforeMethod" is-config="true" duration-ms="85" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyList@4501b7af]" name="storeAndLoadItemBids" duration-ms="9" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyList@4501b7af]" name="afterMethod" is-config="true" duration-ms="31" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyList -->
      <class name="org.jpwh.test.associations.OneToManyOrphanRemoval">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyOrphanRemoval@46d56d67]" name="beforeMethod" is-config="true" duration-ms="97" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyOrphanRemoval@46d56d67]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyOrphanRemoval@46d56d67]" name="storeAndLoadItemBids" duration-ms="12" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyOrphanRemoval@46d56d67]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyOrphanRemoval -->
      <class name="org.jpwh.test.collections.BagOfStringsOrderBy">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.BagOfStringsOrderBy@68c4039c]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.BagOfStringsOrderBy@68c4039c]" name="beforeMethod" is-config="true" duration-ms="89" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.BagOfStringsOrderBy@68c4039c]" name="storeLoadCollection" duration-ms="5" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.BagOfStringsOrderBy@68c4039c]" name="afterMethod" is-config="true" duration-ms="30" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.BagOfStringsOrderBy -->
      <class name="org.jpwh.test.associations.OneToManyJoinTable">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyJoinTable@59fa1d9b]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyJoinTable@59fa1d9b]" name="beforeMethod" is-config="true" duration-ms="112" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadItemUsers()[pri:0, instance:org.jpwh.test.associations.OneToManyJoinTable@59fa1d9b]" name="storeAndLoadItemUsers" duration-ms="11" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemUsers -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyJoinTable@59fa1d9b]" name="afterMethod" is-config="true" duration-ms="30" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyJoinTable -->
      <class name="org.jpwh.test.associations.OneToManyEmbeddable">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddable@14acaea5]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddable@14acaea5]" name="beforeMethod" is-config="true" duration-ms="86" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadUsersShipments()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddable@14acaea5]" name="storeAndLoadUsersShipments" duration-ms="7" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsersShipments -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddable@14acaea5]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyEmbeddable -->
      <class name="org.jpwh.test.collections.MapOfStringsOrderBy">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.MapOfStringsOrderBy@475530b9]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStringsOrderBy@475530b9]" name="beforeMethod" is-config="true" duration-ms="82" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.MapOfStringsOrderBy@475530b9]" name="storeLoadCollection" duration-ms="3" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStringsOrderBy@475530b9]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:20Z" finished-at="2021-05-01T12:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.MapOfStringsOrderBy -->
      <class name="org.jpwh.test.associations.ManyToManyBidirectional">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyBidirectional@cb5822]" name="beforeMethod" is-config="true" duration-ms="74" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.ManyToManyBidirectional@cb5822]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadCategoryItems()[pri:0, instance:org.jpwh.test.associations.ManyToManyBidirectional@cb5822]" name="storeLoadCategoryItems" duration-ms="8" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCategoryItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyBidirectional@cb5822]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.ManyToManyBidirectional -->
      <class name="org.jpwh.test.collections.BagOfEmbeddables">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.BagOfEmbeddables@3532ec19]" name="beforeMethod" is-config="true" duration-ms="80" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.BagOfEmbeddables@3532ec19]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.BagOfEmbeddables@3532ec19]" name="storeLoadCollection" duration-ms="7" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.BagOfEmbeddables@3532ec19]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.BagOfEmbeddables -->
      <class name="org.jpwh.test.collections.MapOfEmbeddables">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.MapOfEmbeddables@5b275dab]" name="beforeMethod" is-config="true" duration-ms="74" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.MapOfEmbeddables@5b275dab]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.MapOfEmbeddables@5b275dab]" name="storeLoadCollection" duration-ms="6" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.MapOfEmbeddables@5b275dab]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:21Z" finished-at="2021-05-01T12:48:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.MapOfEmbeddables -->
      <class name="org.jpwh.test.associations.OneToOneSharedPrimaryKey">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToOneSharedPrimaryKey@8bd1b6a]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneSharedPrimaryKey@8bd1b6a]" name="beforeMethod" is-config="true" duration-ms="98" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadUserAddress()[pri:0, instance:org.jpwh.test.associations.OneToOneSharedPrimaryKey@8bd1b6a]" name="storeAndLoadUserAddress" duration-ms="4" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUserAddress -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneSharedPrimaryKey@8bd1b6a]" name="afterMethod" is-config="true" duration-ms="37" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToOneSharedPrimaryKey -->
      <class name="org.jpwh.test.collections.SetOfEmbeddables">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddables@26653222]" name="beforeClass" is-config="true" duration-ms="2" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddables@26653222]" name="beforeMethod" is-config="true" duration-ms="82" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddables@26653222]" name="storeLoadCollection" duration-ms="6" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddables@26653222]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:19Z" finished-at="2021-05-01T12:48:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SetOfEmbeddables -->
      <class name="org.jpwh.test.associations.OneToManyBidirectional">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyBidirectional@cc285f4]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyBidirectional@cc285f4]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyBidirectional@cc285f4]" name="storeAndLoadItemBids" duration-ms="12" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyBidirectional@cc285f4]" name="afterMethod" is-config="true" duration-ms="30" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyBidirectional -->
      <class name="org.jpwh.test.collections.ListOfStrings">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.ListOfStrings@29774679]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.ListOfStrings@29774679]" name="beforeMethod" is-config="true" duration-ms="68" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.ListOfStrings@29774679]" name="storeLoadCollection" duration-ms="4" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.ListOfStrings@29774679]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:22Z" finished-at="2021-05-01T12:48:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.ListOfStrings -->
    </test> <!-- Collections/Associations -->
    <test name="Complex Schemas" duration-ms="2149" started-at="2021-05-01T09:48:23Z" finished-at="2021-05-01T09:48:25Z">
      <class name="org.jpwh.test.complexschemas.CompositeKeyMapsId">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyMapsId@4883b407]" name="beforeMethod" is-config="true" duration-ms="72" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyMapsId@4883b407]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyMapsId@4883b407]" name="storeLoad" duration-ms="3" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyMapsId@4883b407]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CompositeKeyMapsId -->
      <class name="org.jpwh.test.complexschemas.NaturalForeignKey">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.NaturalForeignKey@1794d431]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.NaturalForeignKey@1794d431]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.NaturalForeignKey@1794d431]" name="storeLoad" duration-ms="7" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.NaturalForeignKey@1794d431]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.NaturalForeignKey -->
      <class name="org.jpwh.test.complexschemas.SecondaryTable">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.SecondaryTable@39c0f4a]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.SecondaryTable@39c0f4a]" name="beforeMethod" is-config="true" duration-ms="70" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeAndLoadUsers()[pri:0, instance:org.jpwh.test.complexschemas.SecondaryTable@39c0f4a]" name="storeAndLoadUsers" duration-ms="2" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsers -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.SecondaryTable@39c0f4a]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.SecondaryTable -->
      <class name="org.jpwh.test.complexschemas.NaturalPrimaryKey">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.NaturalPrimaryKey@6093dd95]" name="beforeMethod" is-config="true" duration-ms="63" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.NaturalPrimaryKey@6093dd95]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.NaturalPrimaryKey@6093dd95]" name="storeLoad" duration-ms="2" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.NaturalPrimaryKey@6093dd95]" name="afterMethod" is-config="true" duration-ms="21" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.NaturalPrimaryKey -->
      <class name="org.jpwh.test.complexschemas.CompositeKeyEmbeddedId">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyEmbeddedId@7d9d1a19]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyEmbeddedId@7d9d1a19]" name="beforeMethod" is-config="true" duration-ms="66" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyEmbeddedId@7d9d1a19]" name="storeLoad" duration-ms="2" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyEmbeddedId@7d9d1a19]" name="afterMethod" is-config="true" duration-ms="22" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CompositeKeyEmbeddedId -->
      <class name="org.jpwh.test.complexschemas.CompositeKeyManyToOne">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyManyToOne@57baeedf]" name="beforeMethod" is-config="true" duration-ms="73" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyManyToOne@57baeedf]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyManyToOne@57baeedf]" name="storeLoad" duration-ms="5" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyManyToOne@57baeedf]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CompositeKeyManyToOne -->
      <class name="org.jpwh.test.complexschemas.CustomSchema">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="beforeMethod" is-config="true" duration-ms="91" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="configurePersistenceUnit()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="configurePersistenceUnit" duration-ms="1" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configurePersistenceUnit -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCheckColumnInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadCheckColumnInvalid" duration-ms="2" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadCheckColumnInvalid(CustomSchema.java:64)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Нарушение ограничения: "(SUBSTRING(LOWER(USERNAME), 0, 5) <> 'admin')"
Check constraint violation: "(SUBSTRING(LOWER(USERNAME), 0, 5) <> 'admin')"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.User */ insert into USERS (email, username, id) values (?, ?, ?) [23513-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:305)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:692)
	at org.h2.command.dml.Insert.insertRows(Insert.java:120)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy18.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCheckColumnInvalid -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="beforeMethod" is-config="true" duration-ms="84" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCheckSingleRowInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadCheckSingleRowInvalid" duration-ms="5" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadCheckSingleRowInvalid(CustomSchema.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Нарушение ограничения: "CONSTRAINT_22: (AUCTIONSTART < AUCTIONEND)"
Check constraint violation: "CONSTRAINT_22: (AUCTIONSTART < AUCTIONEND)"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.Item */ insert into Item (auctionEnd, auctionStart, name, id) values (?, ?, ?, ?) [23513-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.constraint.ConstraintCheck.checkRow(ConstraintCheck.java:92)
	at org.h2.table.Table.fireConstraints(Table.java:873)
	at org.h2.table.Table.fireBeforeRow(Table.java:863)
	at org.h2.command.dml.Insert.insertRows(Insert.java:121)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy18.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCheckSingleRowInvalid -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadCheckSubselectValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadCheckSubselectValid" duration-ms="3" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadCheckSubselectValid(CustomSchema.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Нарушение ограничения: "AUCTION_BID_TIME: (CREATEDON <= (SELECT
    I.AUCTIONEND
FROM PUBLIC.ITEM I
    /* PUBLIC.PRIMARY_KEY_2: ID = ITEM_ID */
    /* scanCount: 2 */
WHERE I.ID = ITEM_ID))"
Check constraint violation: "AUCTION_BID_TIME: (CREATEDON <= (SELECT
    I.AUCTIONEND
FROM PUBLIC.ITEM I
    /* PUBLIC.PRIMARY_KEY_2: ID = ITEM_ID */
    /* scanCount: 2 */
WHERE I.ID = ITEM_ID))"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.Bid */ insert into Bid (amount, createdOn, ITEM_ID, id) values (?, ?, ?, ?) [23513-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.constraint.ConstraintCheck.checkRow(ConstraintCheck.java:92)
	at org.h2.table.Table.fireConstraints(Table.java:873)
	at org.h2.table.Table.fireBeforeRow(Table.java:863)
	at org.h2.command.dml.Insert.insertRows(Insert.java:121)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy18.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCheckSubselectValid -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="beforeMethod" is-config="true" duration-ms="85" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadDomainInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadDomainInvalid" duration-ms="2" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadDomainInvalid(CustomSchema.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Нарушение ограничения: "(POSITION('@', EMAIL) > 1)"
Check constraint violation: "(POSITION('@', EMAIL) > 1)"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.User */ insert into USERS (email, username, id) values (?, ?, ?) [23513-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:305)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:692)
	at org.h2.command.dml.Insert.insertRows(Insert.java:120)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy18.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadDomainInvalid -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="beforeMethod" is-config="true" duration-ms="74" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadUniqueMultiColumnValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadUniqueMultiColumnValid" duration-ms="2" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadUniqueMultiColumnValid(CustomSchema.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Нарушение уникального индекса или первичного ключа: "CONSTRAINT_INDEX_4 ON PUBLIC.USERS(USERNAME)"
Unique index or primary key violation: "CONSTRAINT_INDEX_4 ON PUBLIC.USERS(USERNAME)"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.User */ insert into USERS (email, username, id) values (?, ?, ?) [23505-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.index.BaseIndex.getDuplicateKeyException(BaseIndex.java:82)
	at org.h2.index.TreeIndex.add(TreeIndex.java:62)
	at org.h2.table.RegularTable.addRow(RegularTable.java:122)
	at org.h2.command.dml.Insert.insertRows(Insert.java:124)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy18.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadUniqueMultiColumnValid -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="beforeMethod" is-config="true" duration-ms="73" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoadValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="storeLoadValid" duration-ms="3" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadValid -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@42e26948]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:23Z" finished-at="2021-05-01T12:48:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CustomSchema -->
      <class name="org.jpwh.test.complexschemas.CompositeKeyReadOnly">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyReadOnly@5622fdf]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyReadOnly@5622fdf]" name="beforeMethod" is-config="true" duration-ms="788" started-at="2021-05-01T12:48:24Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyReadOnly@5622fdf]" name="storeLoad" duration-ms="3" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyReadOnly@5622fdf]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CompositeKeyReadOnly -->
    </test> <!-- Complex Schemas -->
    <test name="Concurrency Control" duration-ms="3790" started-at="2021-05-01T09:48:25Z" finished-at="2021-05-01T09:48:29Z">
      <class name="org.jpwh.test.concurrency.VersioningAll">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.VersioningAll@1e397ed7]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.VersioningAll@1e397ed7]" name="beforeMethod" is-config="true" duration-ms="69" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="firstCommitWins()[pri:0, instance:org.jpwh.test.concurrency.VersioningAll@1e397ed7]" name="firstCommitWins" duration-ms="6" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <exception class="javax.persistence.OptimisticLockException">
            <message>
              <![CDATA[Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.OptimisticLockException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.wrapStaleStateException(AbstractEntityManagerImpl.java:1729)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1634)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.internal.EntityManagerImpl$CallbackExceptionMapperImpl.mapManagedFlushFailure(EntityManagerImpl.java:235)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2898)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2270)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.VersioningAll.firstCommitWins(VersioningAll.java:65)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:67)
	at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:54)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3008)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2887)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3267)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:145)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:464)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2894)
	... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstCommitWins -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.VersioningAll@1e397ed7]" name="afterMethod" is-config="true" duration-ms="21" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.VersioningAll -->
      <class name="org.jpwh.test.concurrency.Locking">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="beforeMethod" is-config="true" duration-ms="73" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="extendedLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="extendedLock" duration-ms="16" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extendedLock -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="beforeMethod" is-config="true" duration-ms="86" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="findLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="findLock" duration-ms="42" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findLock -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="beforeMethod" is-config="true" duration-ms="74" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="pessimisticReadWrite()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="pessimisticReadWrite" duration-ms="2032" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pessimisticReadWrite -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="afterMethod" is-config="true" duration-ms="44" started-at="2021-05-01T12:48:27Z" finished-at="2021-05-01T12:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:27Z" finished-at="2021-05-01T12:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="firstCommitWins()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="firstCommitWins" duration-ms="24" started-at="2021-05-01T12:48:27Z" finished-at="2021-05-01T12:48:27Z">
          <exception class="javax.persistence.OptimisticLockException">
            <message>
              <![CDATA[Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.OptimisticLockException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.wrapStaleStateException(AbstractEntityManagerImpl.java:1729)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1634)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1303)
	at org.jpwh.test.concurrency.Versioning.firstCommitWins(Versioning.java:95)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:67)
	at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:54)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3008)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2887)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3267)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:145)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstCommitWins -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="afterMethod" is-config="true" duration-ms="53" started-at="2021-05-01T12:48:27Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="beforeMethod" is-config="true" duration-ms="91" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="forceIncrement()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="forceIncrement" duration-ms="28" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <exception class="org.hibernate.StaleObjectStateException">
            <message>
              <![CDATA[Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [org.jpwh.model.concurrency.version.Item#1000]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [org.jpwh.model.concurrency.version.Item#1000]
	at org.hibernate.persister.entity.AbstractEntityPersister.forceVersionIncrement(AbstractEntityPersister.java:1555)
	at org.hibernate.action.internal.EntityIncrementVersionProcess.doBeforeTransactionCompletion(EntityIncrementVersionProcess.java:43)
	at org.hibernate.engine.spi.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:706)
	at org.hibernate.engine.spi.ActionQueue.beforeTransactionCompletion(ActionQueue.java:373)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2271)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.Versioning.forceIncrement(Versioning.java:279)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.StaleObjectStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- forceIncrement -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="afterMethod" is-config="true" duration-ms="33" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="beforeMethod" is-config="true" duration-ms="75" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="manualVersionChecking()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="manualVersionChecking" duration-ms="25" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <exception class="org.hibernate.OptimisticLockException">
            <message>
              <![CDATA[Newer version [1] of entity [[org.jpwh.model.concurrency.version.Item#1001]] found in database]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.OptimisticLockException: Newer version [1] of entity [[org.jpwh.model.concurrency.version.Item#1001]] found in database
	at org.hibernate.action.internal.EntityVerifyVersionProcess.doBeforeTransactionCompletion(EntityVerifyVersionProcess.java:51)
	at org.hibernate.engine.spi.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:706)
	at org.hibernate.engine.spi.ActionQueue.beforeTransactionCompletion(ActionQueue.java:373)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2271)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.Versioning.manualVersionChecking(Versioning.java:176)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- manualVersionChecking -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@5f2108b5]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.Locking -->
      <class name="org.jpwh.test.concurrency.Versioning">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="beforeMethod" is-config="true" duration-ms="92" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="firstCommitWins()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="firstCommitWins" duration-ms="27" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <exception class="javax.persistence.OptimisticLockException">
            <message>
              <![CDATA[Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.OptimisticLockException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.wrapStaleStateException(AbstractEntityManagerImpl.java:1729)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1634)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1303)
	at org.jpwh.test.concurrency.Versioning.firstCommitWins(Versioning.java:95)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:67)
	at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:54)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3008)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2887)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3267)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:145)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstCommitWins -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="beforeMethod" is-config="true" duration-ms="105" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="forceIncrement()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="forceIncrement" duration-ms="17" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <exception class="org.hibernate.StaleObjectStateException">
            <message>
              <![CDATA[Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [org.jpwh.model.concurrency.version.Item#1000]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [org.jpwh.model.concurrency.version.Item#1000]
	at org.hibernate.persister.entity.AbstractEntityPersister.forceVersionIncrement(AbstractEntityPersister.java:1555)
	at org.hibernate.action.internal.EntityIncrementVersionProcess.doBeforeTransactionCompletion(EntityIncrementVersionProcess.java:43)
	at org.hibernate.engine.spi.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:706)
	at org.hibernate.engine.spi.ActionQueue.beforeTransactionCompletion(ActionQueue.java:373)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2271)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.Versioning.forceIncrement(Versioning.java:279)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.StaleObjectStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- forceIncrement -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="afterMethod" is-config="true" duration-ms="162" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="beforeMethod" is-config="true" duration-ms="121" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="manualVersionChecking()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="manualVersionChecking" duration-ms="29" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <exception class="org.hibernate.OptimisticLockException">
            <message>
              <![CDATA[Newer version [1] of entity [[org.jpwh.model.concurrency.version.Item#1001]] found in database]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.OptimisticLockException: Newer version [1] of entity [[org.jpwh.model.concurrency.version.Item#1001]] found in database
	at org.hibernate.action.internal.EntityVerifyVersionProcess.doBeforeTransactionCompletion(EntityVerifyVersionProcess.java:51)
	at org.hibernate.engine.spi.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:706)
	at org.hibernate.engine.spi.ActionQueue.beforeTransactionCompletion(ActionQueue.java:373)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2271)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.Versioning.manualVersionChecking(Versioning.java:176)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- manualVersionChecking -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@31a5c39e]" name="afterMethod" is-config="true" duration-ms="29" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.Versioning -->
      <class name="org.jpwh.test.concurrency.NonTransactional">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f49dace]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f49dace]" name="beforeMethod" is-config="true" duration-ms="81" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="autoCommit()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f49dace]" name="autoCommit" duration-ms="20" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- autoCommit -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f49dace]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:25Z" finished-at="2021-05-01T12:48:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.NonTransactional -->
      <class name="org.jpwh.test.concurrency.VersioningTimestamp">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.VersioningTimestamp@490ab905]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.VersioningTimestamp@490ab905]" name="beforeMethod" is-config="true" duration-ms="72" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="firstCommitWins()[pri:0, instance:org.jpwh.test.concurrency.VersioningTimestamp@490ab905]" name="firstCommitWins" duration-ms="15" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <exception class="javax.persistence.OptimisticLockException">
            <message>
              <![CDATA[Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.OptimisticLockException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.wrapStaleStateException(AbstractEntityManagerImpl.java:1729)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1634)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.internal.EntityManagerImpl$CallbackExceptionMapperImpl.mapManagedFlushFailure(EntityManagerImpl.java:235)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2898)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2270)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.VersioningTimestamp.firstCommitWins(VersioningTimestamp.java:65)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:67)
	at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:54)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3008)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2887)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3267)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:145)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:464)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2894)
	... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstCommitWins -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.VersioningTimestamp@490ab905]" name="afterMethod" is-config="true" duration-ms="21" started-at="2021-05-01T12:48:28Z" finished-at="2021-05-01T12:48:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.VersioningTimestamp -->
    </test> <!-- Concurrency Control -->
    <test name="Conversations" duration-ms="354" started-at="2021-05-01T09:48:29Z" finished-at="2021-05-01T09:48:29Z">
      <class name="org.jpwh.test.conversation.ExtendedPC">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="beforeMethod" is-config="true" duration-ms="82" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="conversationCreateItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="conversationCreateItem" duration-ms="3" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- conversationCreateItem -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="beforeMethod" is-config="true" duration-ms="72" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="conversationEditItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="conversationEditItem" duration-ms="8" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- conversationEditItem -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@56ef9176]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.conversation.ExtendedPC -->
      <class name="org.jpwh.test.conversation.Detached">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.conversation.Detached@4566e5bd]" name="beforeMethod" is-config="true" duration-ms="95" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.conversation.Detached@4566e5bd]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="businessKeyEquality()[pri:0, instance:org.jpwh.test.conversation.Detached@4566e5bd]" name="businessKeyEquality" duration-ms="12" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- businessKeyEquality -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.conversation.Detached@4566e5bd]" name="afterMethod" is-config="true" duration-ms="31" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.conversation.Detached -->
    </test> <!-- Conversations -->
    <test name="Fetching" duration-ms="2485" started-at="2021-05-01T09:48:29Z" finished-at="2021-05-01T09:48:31Z">
      <class name="org.jpwh.test.fetching.EagerSelect">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.EagerSelect@31dc339b]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.EagerSelect@31dc339b]" name="beforeMethod" is-config="true" duration-ms="75" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchEagerSelect()[pri:0, instance:org.jpwh.test.fetching.EagerSelect@31dc339b]" name="fetchEagerSelect" duration-ms="8" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchEagerSelect -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.EagerSelect@31dc339b]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.EagerSelect -->
      <class name="org.jpwh.test.fetching.CartesianProduct">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.CartesianProduct@60c6f5b]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.CartesianProduct@60c6f5b]" name="beforeMethod" is-config="true" duration-ms="81" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchCollections()[pri:0, instance:org.jpwh.test.fetching.CartesianProduct@60c6f5b]" name="fetchCollections" duration-ms="8" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchCollections -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.CartesianProduct@60c6f5b]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.CartesianProduct -->
      <class name="org.jpwh.test.fetching.LazyInterception">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@2038ae61]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@2038ae61]" name="beforeMethod" is-config="true" duration-ms="73" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="lazyBasic()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@2038ae61]" name="lazyBasic" duration-ms="6" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lazyBasic -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@2038ae61]" name="afterMethod" is-config="true" duration-ms="22" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@2038ae61]" name="beforeMethod" is-config="true" duration-ms="68" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="noUserProxy()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@2038ae61]" name="noUserProxy" duration-ms="5" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- noUserProxy -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@2038ae61]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.LazyInterception -->
      <class name="org.jpwh.test.fetching.Subselect">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.Subselect@31610302]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.Subselect@31610302]" name="beforeMethod" is-config="true" duration-ms="83" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchCollectionSubselect()[pri:0, instance:org.jpwh.test.fetching.Subselect@31610302]" name="fetchCollectionSubselect" duration-ms="15" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchCollectionSubselect -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.Subselect@31610302]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.Subselect -->
      <class name="org.jpwh.test.fetching.NPlusOneSelects">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@617faa95]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@617faa95]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchBids()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@617faa95]" name="fetchBids" duration-ms="10" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@617faa95]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@617faa95]" name="beforeMethod" is-config="true" duration-ms="69" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchUsers()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@617faa95]" name="fetchUsers" duration-ms="9" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchUsers -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@617faa95]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.NPlusOneSelects -->
      <class name="org.jpwh.test.fetching.ReadOnly">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@6e1ec318]" name="beforeMethod" is-config="true" duration-ms="128" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@6e1ec318]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="immutableEntity()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@6e1ec318]" name="immutableEntity" duration-ms="8" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- immutableEntity -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@6e1ec318]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@6e1ec318]" name="beforeMethod" is-config="true" duration-ms="70" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="selectiveReadOnly()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@6e1ec318]" name="selectiveReadOnly" duration-ms="10" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectiveReadOnly -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@6e1ec318]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.ReadOnly -->
      <class name="org.jpwh.test.fetching.Batch">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.Batch@3c0f93f1]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.Batch@3c0f93f1]" name="beforeMethod" is-config="true" duration-ms="93" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchCollectionBatches()[pri:0, instance:org.jpwh.test.fetching.Batch@3c0f93f1]" name="fetchCollectionBatches" duration-ms="17" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchCollectionBatches -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.Batch@3c0f93f1]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.Batch@3c0f93f1]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchProxyBatches()[pri:0, instance:org.jpwh.test.fetching.Batch@3c0f93f1]" name="fetchProxyBatches" duration-ms="7" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchProxyBatches -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.Batch@3c0f93f1]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.Batch -->
      <class name="org.jpwh.test.fetching.EagerJoin">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.EagerJoin@7e0b0338]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.EagerJoin@7e0b0338]" name="beforeMethod" is-config="true" duration-ms="75" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchEagerJoin()[pri:0, instance:org.jpwh.test.fetching.EagerJoin@7e0b0338]" name="fetchEagerJoin" duration-ms="8" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchEagerJoin -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.EagerJoin@7e0b0338]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.EagerJoin -->
      <class name="org.jpwh.test.fetching.LazyProxyCollections">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@1e127982]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@1e127982]" name="beforeMethod" is-config="true" duration-ms="89" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="lazyCollections()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@1e127982]" name="lazyCollections" duration-ms="11" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lazyCollections -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@1e127982]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@1e127982]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="lazyEntityProxies()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@1e127982]" name="lazyEntityProxies" duration-ms="24" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lazyEntityProxies -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@1e127982]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.LazyProxyCollections -->
      <class name="org.jpwh.test.fetching.FetchLoadGraph">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="beforeMethod" is-config="true" duration-ms="122" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="loadBidBidderItem()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="loadBidBidderItem" duration-ms="20" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadBidBidderItem -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="loadBidBidderItemSellerBids()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="loadBidBidderItemSellerBids" duration-ms="12" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadBidBidderItemSellerBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="loadItem()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="loadItem" duration-ms="9" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadItem -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:48:29Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="beforeMethod" is-config="true" duration-ms="75" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="loadItemSeller()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="loadItemSeller" duration-ms="13" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadItemSeller -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@dc24521]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:30Z" finished-at="2021-05-01T12:48:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.FetchLoadGraph -->
      <class name="org.jpwh.test.fetching.EagerQuery">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@544fe44c]" name="beforeClass" is-config="true" duration-ms="4" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@544fe44c]" name="beforeMethod" is-config="true" duration-ms="72" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchBids()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@544fe44c]" name="fetchBids" duration-ms="12" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchBids -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@544fe44c]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@544fe44c]" name="beforeMethod" is-config="true" duration-ms="72" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchUsers()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@544fe44c]" name="fetchUsers" duration-ms="10" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchUsers -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@544fe44c]" name="afterMethod" is-config="true" duration-ms="23" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.EagerQuery -->
      <class name="org.jpwh.test.fetching.Profile">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.Profile@10bdf5e5]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.Profile@10bdf5e5]" name="beforeMethod" is-config="true" duration-ms="94" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="fetchWithProfile()[pri:0, instance:org.jpwh.test.fetching.Profile@10bdf5e5]" name="fetchWithProfile" duration-ms="9" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchWithProfile -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.Profile@10bdf5e5]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.Profile -->
    </test> <!-- Fetching -->
    <test name="Filtering" duration-ms="3474" started-at="2021-05-01T09:48:31Z" finished-at="2021-05-01T09:48:35Z">
      <class name="org.jpwh.test.filtering.Cascade">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:34Z" finished-at="2021-05-01T12:48:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="beforeMethod" is-config="true" duration-ms="139" started-at="2021-05-01T12:48:34Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="detachMerge()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="detachMerge" duration-ms="9" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- detachMerge -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="afterMethod" is-config="true" duration-ms="30" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="beforeMethod" is-config="true" duration-ms="93" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="refresh()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="refresh" duration-ms="31" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refresh -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="afterMethod" is-config="true" duration-ms="32" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="beforeMethod" is-config="true" duration-ms="93" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="replicate()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="replicate" duration-ms="7" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- replicate -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@3d99d22e]" name="afterMethod" is-config="true" duration-ms="32" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.filtering.Cascade -->
      <class name="org.jpwh.test.filtering.Callback">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Callback@50b494a6]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.Callback@50b494a6]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:31Z" finished-at="2021-05-01T12:48:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="notifyPostPersist()[pri:0, instance:org.jpwh.test.filtering.Callback@50b494a6]" name="notifyPostPersist" duration-ms="3" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- notifyPostPersist -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Callback@50b494a6]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.filtering.Callback -->
      <class name="org.jpwh.test.filtering.DynamicFilter">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@49fc609f]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@49fc609f]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="filterCollection()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@49fc609f]" name="filterCollection" duration-ms="8" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- filterCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@49fc609f]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@49fc609f]" name="beforeMethod" is-config="true" duration-ms="73" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="filterItems()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@49fc609f]" name="filterItems" duration-ms="8" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- filterItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@49fc609f]" name="afterMethod" is-config="true" duration-ms="24" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.filtering.DynamicFilter -->
      <class name="org.jpwh.test.filtering.AuditLogging">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.AuditLogging@32709393]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:34Z" finished-at="2021-05-01T12:48:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.AuditLogging@32709393]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:48:34Z" finished-at="2021-05-01T12:48:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="writeAuditLog()[pri:0, instance:org.jpwh.test.filtering.AuditLogging@32709393]" name="writeAuditLog" duration-ms="21" started-at="2021-05-01T12:48:34Z" finished-at="2021-05-01T12:48:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- writeAuditLog -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.AuditLogging@32709393]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:48:34Z" finished-at="2021-05-01T12:48:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.filtering.AuditLogging -->
      <class name="org.jpwh.test.filtering.Envers">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.Envers@3cef309d]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Envers@3cef309d]" name="beforeMethod" is-config="true" duration-ms="1878" started-at="2021-05-01T12:48:32Z" finished-at="2021-05-01T12:48:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="auditLogging()[pri:0, instance:org.jpwh.test.filtering.Envers@3cef309d]" name="auditLogging" duration-ms="79" started-at="2021-05-01T12:48:34Z" finished-at="2021-05-01T12:48:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- auditLogging -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Envers@3cef309d]" name="afterMethod" is-config="true" duration-ms="609" started-at="2021-05-01T12:48:34Z" finished-at="2021-05-01T12:48:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.filtering.Envers -->
    </test> <!-- Filtering -->
    <test name="Querying" duration-ms="89633" started-at="2021-05-01T09:48:35Z" finished-at="2021-05-01T09:50:05Z">
      <class name="org.jpwh.test.querying.criteria.Selection">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Selection@480bdb19]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:50:00Z" finished-at="2021-05-01T12:50:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Selection@480bdb19]" name="beforeMethod" is-config="true" duration-ms="1739" started-at="2021-05-01T12:50:00Z" finished-at="2021-05-01T12:50:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Selection@480bdb19]" name="executeQueries" duration-ms="21" started-at="2021-05-01T12:50:02Z" finished-at="2021-05-01T12:50:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Selection@480bdb19]" name="afterMethod" is-config="true" duration-ms="2471" started-at="2021-05-01T12:50:02Z" finished-at="2021-05-01T12:50:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Selection -->
      <class name="org.jpwh.test.querying.advanced.HibernateCriteria">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@4232c52b]" name="beforeMethod" is-config="true" duration-ms="1873" started-at="2021-05-01T12:49:46Z" finished-at="2021-05-01T12:49:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@4232c52b]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:46Z" finished-at="2021-05-01T12:49:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@4232c52b]" name="executeQueries" duration-ms="37" started-at="2021-05-01T12:49:47Z" finished-at="2021-05-01T12:49:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@4232c52b]" name="afterMethod" is-config="true" duration-ms="600" started-at="2021-05-01T12:49:48Z" finished-at="2021-05-01T12:49:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@4232c52b]" name="beforeMethod" is-config="true" duration-ms="1790" started-at="2021-05-01T12:49:48Z" finished-at="2021-05-01T12:49:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="foo()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@4232c52b]" name="foo" duration-ms="9" started-at="2021-05-01T12:49:50Z" finished-at="2021-05-01T12:49:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- foo -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@4232c52b]" name="afterMethod" is-config="true" duration-ms="576" started-at="2021-05-01T12:49:50Z" finished-at="2021-05-01T12:49:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.advanced.HibernateCriteria -->
      <class name="org.jpwh.test.querying.jpql.Restriction">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@704a52ec]" name="beforeMethod" is-config="true" duration-ms="1877" started-at="2021-05-01T12:49:29Z" finished-at="2021-05-01T12:49:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@704a52ec]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:29Z" finished-at="2021-05-01T12:49:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@704a52ec]" name="executeQueries" duration-ms="19" started-at="2021-05-01T12:49:30Z" finished-at="2021-05-01T12:49:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@704a52ec]" name="afterMethod" is-config="true" duration-ms="559" started-at="2021-05-01T12:49:30Z" finished-at="2021-05-01T12:49:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@704a52ec]" name="beforeMethod" is-config="true" duration-ms="1728" started-at="2021-05-01T12:49:31Z" finished-at="2021-05-01T12:49:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@704a52ec]" name="executeQueriesWithFunctions" duration-ms="10" started-at="2021-05-01T12:49:33Z" finished-at="2021-05-01T12:49:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueriesWithFunctions -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@704a52ec]" name="afterMethod" is-config="true" duration-ms="623" started-at="2021-05-01T12:49:33Z" finished-at="2021-05-01T12:49:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Restriction -->
      <class name="org.jpwh.test.querying.criteria.Typesafe">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Typesafe@6ee52dcd]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:49:33Z" finished-at="2021-05-01T12:49:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Typesafe@6ee52dcd]" name="beforeMethod" is-config="true" duration-ms="1836" started-at="2021-05-01T12:49:33Z" finished-at="2021-05-01T12:49:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Typesafe@6ee52dcd]" name="executeQueries" duration-ms="10" started-at="2021-05-01T12:49:35Z" finished-at="2021-05-01T12:49:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Typesafe@6ee52dcd]" name="afterMethod" is-config="true" duration-ms="586" started-at="2021-05-01T12:49:35Z" finished-at="2021-05-01T12:49:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Typesafe -->
      <class name="org.jpwh.test.querying.advanced.FilterCollections">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.advanced.FilterCollections@33c7e1bb]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:38Z" finished-at="2021-05-01T12:49:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.advanced.FilterCollections@33c7e1bb]" name="beforeMethod" is-config="true" duration-ms="1790" started-at="2021-05-01T12:49:38Z" finished-at="2021-05-01T12:49:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.advanced.FilterCollections@33c7e1bb]" name="executeQueries" duration-ms="29" started-at="2021-05-01T12:49:40Z" finished-at="2021-05-01T12:49:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.advanced.FilterCollections@33c7e1bb]" name="afterMethod" is-config="true" duration-ms="596" started-at="2021-05-01T12:49:40Z" finished-at="2021-05-01T12:49:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.advanced.FilterCollections -->
      <class name="org.jpwh.test.querying.criteria.Grouping">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Grouping@2bbf4b8b]" name="beforeMethod" is-config="true" duration-ms="1763" started-at="2021-05-01T12:49:26Z" finished-at="2021-05-01T12:49:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Grouping@2bbf4b8b]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:26Z" finished-at="2021-05-01T12:49:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Grouping@2bbf4b8b]" name="executeQueries" duration-ms="14" started-at="2021-05-01T12:49:28Z" finished-at="2021-05-01T12:49:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Grouping@2bbf4b8b]" name="afterMethod" is-config="true" duration-ms="594" started-at="2021-05-01T12:49:28Z" finished-at="2021-05-01T12:49:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Grouping -->
      <class name="org.jpwh.test.querying.CreateExecuteQueries">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeMethod" is-config="true" duration-ms="2080" started-at="2021-05-01T12:48:35Z" finished-at="2021-05-01T12:48:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="createHibernateQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="createHibernateQueries" duration-ms="28" started-at="2021-05-01T12:48:37Z" finished-at="2021-05-01T12:48:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createHibernateQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="afterMethod" is-config="true" duration-ms="733" started-at="2021-05-01T12:48:37Z" finished-at="2021-05-01T12:48:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeMethod" is-config="true" duration-ms="1828" started-at="2021-05-01T12:48:38Z" finished-at="2021-05-01T12:48:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="createNamedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="createNamedQueries" duration-ms="12" started-at="2021-05-01T12:48:40Z" finished-at="2021-05-01T12:48:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createNamedQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="afterMethod" is-config="true" duration-ms="601" started-at="2021-05-01T12:48:40Z" finished-at="2021-05-01T12:48:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeMethod" is-config="true" duration-ms="1789" started-at="2021-05-01T12:48:40Z" finished-at="2021-05-01T12:48:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="createQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="createQueries" duration-ms="17" started-at="2021-05-01T12:48:42Z" finished-at="2021-05-01T12:48:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="afterMethod" is-config="true" duration-ms="609" started-at="2021-05-01T12:48:42Z" finished-at="2021-05-01T12:48:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeMethod" is-config="true" duration-ms="1907" started-at="2021-05-01T12:48:43Z" finished-at="2021-05-01T12:48:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="createTypedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="createTypedQueries" duration-ms="16" started-at="2021-05-01T12:48:45Z" finished-at="2021-05-01T12:48:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createTypedQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="afterMethod" is-config="true" duration-ms="586" started-at="2021-05-01T12:48:45Z" finished-at="2021-05-01T12:48:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeMethod" is-config="true" duration-ms="1779" started-at="2021-05-01T12:48:45Z" finished-at="2021-05-01T12:48:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="executeQueries" duration-ms="24" started-at="2021-05-01T12:48:47Z" finished-at="2021-05-01T12:48:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="afterMethod" is-config="true" duration-ms="595" started-at="2021-05-01T12:48:47Z" finished-at="2021-05-01T12:48:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeMethod" is-config="true" duration-ms="1954" started-at="2021-05-01T12:48:48Z" finished-at="2021-05-01T12:48:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="namedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="namedQueries" duration-ms="18" started-at="2021-05-01T12:48:50Z" finished-at="2021-05-01T12:48:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- namedQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="afterMethod" is-config="true" duration-ms="627" started-at="2021-05-01T12:48:50Z" finished-at="2021-05-01T12:48:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeMethod" is-config="true" duration-ms="1911" started-at="2021-05-01T12:48:50Z" finished-at="2021-05-01T12:48:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="pagination()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="pagination" duration-ms="12" started-at="2021-05-01T12:48:52Z" finished-at="2021-05-01T12:48:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pagination -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="afterMethod" is-config="true" duration-ms="602" started-at="2021-05-01T12:48:52Z" finished-at="2021-05-01T12:48:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeMethod" is-config="true" duration-ms="1871" started-at="2021-05-01T12:48:53Z" finished-at="2021-05-01T12:48:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="parameterBinding()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="parameterBinding" duration-ms="23" started-at="2021-05-01T12:48:55Z" finished-at="2021-05-01T12:48:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parameterBinding -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="afterMethod" is-config="true" duration-ms="613" started-at="2021-05-01T12:48:55Z" finished-at="2021-05-01T12:48:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="beforeMethod" is-config="true" duration-ms="1813" started-at="2021-05-01T12:48:55Z" finished-at="2021-05-01T12:48:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="queryHints()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="queryHints" duration-ms="13" started-at="2021-05-01T12:48:57Z" finished-at="2021-05-01T12:48:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryHints -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@3dfc5fb8]" name="afterMethod" is-config="true" duration-ms="585" started-at="2021-05-01T12:48:57Z" finished-at="2021-05-01T12:48:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.CreateExecuteQueries -->
      <class name="org.jpwh.test.querying.advanced.TransformResults">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.advanced.TransformResults@34c4973]" name="beforeMethod" is-config="true" duration-ms="1893" started-at="2021-05-01T12:49:55Z" finished-at="2021-05-01T12:49:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.advanced.TransformResults@34c4973]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:55Z" finished-at="2021-05-01T12:49:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.advanced.TransformResults@34c4973]" name="executeQueries" duration-ms="12" started-at="2021-05-01T12:49:57Z" finished-at="2021-05-01T12:49:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.advanced.TransformResults@34c4973]" name="afterMethod" is-config="true" duration-ms="557" started-at="2021-05-01T12:49:57Z" finished-at="2021-05-01T12:49:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.advanced.TransformResults -->
      <class name="org.jpwh.test.querying.jpql.Projection">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@3cb1ffe6]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:49:11Z" finished-at="2021-05-01T12:49:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@3cb1ffe6]" name="beforeMethod" is-config="true" duration-ms="1777" started-at="2021-05-01T12:49:11Z" finished-at="2021-05-01T12:49:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@3cb1ffe6]" name="executeQueries" duration-ms="23" started-at="2021-05-01T12:49:13Z" finished-at="2021-05-01T12:49:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@3cb1ffe6]" name="afterMethod" is-config="true" duration-ms="600" started-at="2021-05-01T12:49:13Z" finished-at="2021-05-01T12:49:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@3cb1ffe6]" name="beforeMethod" is-config="true" duration-ms="1907" started-at="2021-05-01T12:49:14Z" finished-at="2021-05-01T12:49:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@3cb1ffe6]" name="executeQueriesWithFunctions" duration-ms="12" started-at="2021-05-01T12:49:16Z" finished-at="2021-05-01T12:49:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueriesWithFunctions -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@3cb1ffe6]" name="afterMethod" is-config="true" duration-ms="589" started-at="2021-05-01T12:49:16Z" finished-at="2021-05-01T12:49:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Projection -->
      <class name="org.jpwh.test.querying.sql.JDBCFallback">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.sql.JDBCFallback@57e1b0c]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:09Z" finished-at="2021-05-01T12:49:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.JDBCFallback@57e1b0c]" name="beforeMethod" is-config="true" duration-ms="1978" started-at="2021-05-01T12:49:09Z" finished-at="2021-05-01T12:49:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="queryItems()[pri:0, instance:org.jpwh.test.querying.sql.JDBCFallback@57e1b0c]" name="queryItems" duration-ms="10" started-at="2021-05-01T12:49:11Z" finished-at="2021-05-01T12:49:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryItems -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.JDBCFallback@57e1b0c]" name="afterMethod" is-config="true" duration-ms="592" started-at="2021-05-01T12:49:11Z" finished-at="2021-05-01T12:49:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.sql.JDBCFallback -->
      <class name="org.jpwh.test.querying.jpql.Joins">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Joins@4493d195]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:04Z" finished-at="2021-05-01T12:49:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Joins@4493d195]" name="beforeMethod" is-config="true" duration-ms="1944" started-at="2021-05-01T12:49:04Z" finished-at="2021-05-01T12:49:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Joins@4493d195]" name="executeQueries" duration-ms="30" started-at="2021-05-01T12:49:06Z" finished-at="2021-05-01T12:49:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Joins@4493d195]" name="afterMethod" is-config="true" duration-ms="609" started-at="2021-05-01T12:49:06Z" finished-at="2021-05-01T12:49:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Joins -->
      <class name="org.jpwh.test.querying.jpql.Selection">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Selection@2a556333]" name="beforeMethod" is-config="true" duration-ms="1704" started-at="2021-05-01T12:49:58Z" finished-at="2021-05-01T12:50:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Selection@2a556333]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:58Z" finished-at="2021-05-01T12:49:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Selection@2a556333]" name="executeQueries" duration-ms="134" started-at="2021-05-01T12:50:00Z" finished-at="2021-05-01T12:50:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Selection@2a556333]" name="afterMethod" is-config="true" duration-ms="592" started-at="2021-05-01T12:50:00Z" finished-at="2021-05-01T12:50:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Selection -->
      <class name="org.jpwh.test.querying.criteria.Subselects">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Subselects@76f2b07d]" name="beforeMethod" is-config="true" duration-ms="1727" started-at="2021-05-01T12:49:36Z" finished-at="2021-05-01T12:49:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Subselects@76f2b07d]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:36Z" finished-at="2021-05-01T12:49:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Subselects@76f2b07d]" name="executeQueries" duration-ms="20" started-at="2021-05-01T12:49:38Z" finished-at="2021-05-01T12:49:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Subselects@76f2b07d]" name="afterMethod" is-config="true" duration-ms="824" started-at="2021-05-01T12:49:38Z" finished-at="2021-05-01T12:49:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Subselects -->
      <class name="org.jpwh.test.querying.criteria.Restriction">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2781e022]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:41Z" finished-at="2021-05-01T12:49:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2781e022]" name="beforeMethod" is-config="true" duration-ms="1876" started-at="2021-05-01T12:49:41Z" finished-at="2021-05-01T12:49:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2781e022]" name="executeQueries" duration-ms="39" started-at="2021-05-01T12:49:43Z" finished-at="2021-05-01T12:49:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2781e022]" name="afterMethod" is-config="true" duration-ms="582" started-at="2021-05-01T12:49:43Z" finished-at="2021-05-01T12:49:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2781e022]" name="beforeMethod" is-config="true" duration-ms="1715" started-at="2021-05-01T12:49:43Z" finished-at="2021-05-01T12:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2781e022]" name="executeQueriesWithFunctions" duration-ms="12" started-at="2021-05-01T12:49:45Z" finished-at="2021-05-01T12:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueriesWithFunctions -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2781e022]" name="afterMethod" is-config="true" duration-ms="587" started-at="2021-05-01T12:49:45Z" finished-at="2021-05-01T12:49:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Restriction -->
      <class name="org.jpwh.test.querying.criteria.Joins">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Joins@7d70d1b1]" name="beforeClass" is-config="true" duration-ms="1" started-at="2021-05-01T12:49:24Z" finished-at="2021-05-01T12:49:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Joins@7d70d1b1]" name="beforeMethod" is-config="true" duration-ms="1929" started-at="2021-05-01T12:49:24Z" finished-at="2021-05-01T12:49:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Joins@7d70d1b1]" name="executeQueries" duration-ms="40" started-at="2021-05-01T12:49:26Z" finished-at="2021-05-01T12:49:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Joins@7d70d1b1]" name="afterMethod" is-config="true" duration-ms="577" started-at="2021-05-01T12:49:26Z" finished-at="2021-05-01T12:49:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Joins -->
      <class name="org.jpwh.test.querying.sql.HibernateSQLQueries">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@458c1321]" name="beforeMethod" is-config="true" duration-ms="3185" started-at="2021-05-01T12:48:58Z" finished-at="2021-05-01T12:49:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@458c1321]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:48:58Z" finished-at="2021-05-01T12:48:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@458c1321]" name="executeQueries" duration-ms="27" started-at="2021-05-01T12:49:01Z" finished-at="2021-05-01T12:49:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@458c1321]" name="afterMethod" is-config="true" duration-ms="608" started-at="2021-05-01T12:49:01Z" finished-at="2021-05-01T12:49:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@458c1321]" name="beforeMethod" is-config="true" duration-ms="1717" started-at="2021-05-01T12:49:01Z" finished-at="2021-05-01T12:49:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeRecursiveQueries()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@458c1321]" name="executeRecursiveQueries" duration-ms="15" started-at="2021-05-01T12:49:03Z" finished-at="2021-05-01T12:49:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeRecursiveQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@458c1321]" name="afterMethod" is-config="true" duration-ms="574" started-at="2021-05-01T12:49:03Z" finished-at="2021-05-01T12:49:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.sql.HibernateSQLQueries -->
      <class name="org.jpwh.test.querying.sql.NativeQueries">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@1877ab81]" name="beforeMethod" is-config="true" duration-ms="1820" started-at="2021-05-01T12:49:50Z" finished-at="2021-05-01T12:49:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@1877ab81]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:50Z" finished-at="2021-05-01T12:49:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@1877ab81]" name="executeQueries" duration-ms="19" started-at="2021-05-01T12:49:52Z" finished-at="2021-05-01T12:49:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@1877ab81]" name="afterMethod" is-config="true" duration-ms="654" started-at="2021-05-01T12:49:52Z" finished-at="2021-05-01T12:49:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@1877ab81]" name="beforeMethod" is-config="true" duration-ms="1859" started-at="2021-05-01T12:49:53Z" finished-at="2021-05-01T12:49:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeRecursiveQueries()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@1877ab81]" name="executeRecursiveQueries" duration-ms="8" started-at="2021-05-01T12:49:55Z" finished-at="2021-05-01T12:49:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeRecursiveQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@1877ab81]" name="afterMethod" is-config="true" duration-ms="620" started-at="2021-05-01T12:49:55Z" finished-at="2021-05-01T12:49:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.sql.NativeQueries -->
      <class name="org.jpwh.test.querying.jpql.Subselects">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Subselects@2a742aa2]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:21Z" finished-at="2021-05-01T12:49:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Subselects@2a742aa2]" name="beforeMethod" is-config="true" duration-ms="1785" started-at="2021-05-01T12:49:21Z" finished-at="2021-05-01T12:49:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Subselects@2a742aa2]" name="executeQueries" duration-ms="12" started-at="2021-05-01T12:49:23Z" finished-at="2021-05-01T12:49:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Subselects@2a742aa2]" name="afterMethod" is-config="true" duration-ms="622" started-at="2021-05-01T12:49:23Z" finished-at="2021-05-01T12:49:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Subselects -->
      <class name="org.jpwh.test.querying.jpql.Grouping">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Grouping@30a3107a]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:06Z" finished-at="2021-05-01T12:49:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Grouping@30a3107a]" name="beforeMethod" is-config="true" duration-ms="1822" started-at="2021-05-01T12:49:06Z" finished-at="2021-05-01T12:49:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Grouping@30a3107a]" name="executeQueries" duration-ms="29" started-at="2021-05-01T12:49:08Z" finished-at="2021-05-01T12:49:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Grouping@30a3107a]" name="afterMethod" is-config="true" duration-ms="631" started-at="2021-05-01T12:49:08Z" finished-at="2021-05-01T12:49:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Grouping -->
      <class name="org.jpwh.test.querying.criteria.Projection">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@1563da5]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:49:16Z" finished-at="2021-05-01T12:49:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@1563da5]" name="beforeMethod" is-config="true" duration-ms="1757" started-at="2021-05-01T12:49:16Z" finished-at="2021-05-01T12:49:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@1563da5]" name="executeQueries" duration-ms="27" started-at="2021-05-01T12:49:18Z" finished-at="2021-05-01T12:49:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@1563da5]" name="afterMethod" is-config="true" duration-ms="626" started-at="2021-05-01T12:49:18Z" finished-at="2021-05-01T12:49:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@1563da5]" name="beforeMethod" is-config="true" duration-ms="1901" started-at="2021-05-01T12:49:19Z" finished-at="2021-05-01T12:49:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@1563da5]" name="executeQueriesWithFunctions" duration-ms="13" started-at="2021-05-01T12:49:21Z" finished-at="2021-05-01T12:49:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueriesWithFunctions -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@1563da5]" name="afterMethod" is-config="true" duration-ms="603" started-at="2021-05-01T12:49:21Z" finished-at="2021-05-01T12:49:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Projection -->
    </test> <!-- Querying -->
    <test name="Custom SQL" duration-ms="3475" started-at="2021-05-01T09:50:05Z" finished-at="2021-05-01T09:50:08Z">
      <class name="org.jpwh.test.customsql.CustomSQL">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="beforeMethod" is-config="true" duration-ms="614" started-at="2021-05-01T12:50:05Z" finished-at="2021-05-01T12:50:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:50:05Z" finished-at="2021-05-01T12:50:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="delete()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="delete" duration-ms="10" started-at="2021-05-01T12:50:05Z" finished-at="2021-05-01T12:50:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- delete -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="afterMethod" is-config="true" duration-ms="199" started-at="2021-05-01T12:50:05Z" finished-at="2021-05-01T12:50:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="beforeMethod" is-config="true" duration-ms="598" started-at="2021-05-01T12:50:05Z" finished-at="2021-05-01T12:50:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="read()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="read" duration-ms="7" started-at="2021-05-01T12:50:06Z" finished-at="2021-05-01T12:50:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- read -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="afterMethod" is-config="true" duration-ms="219" started-at="2021-05-01T12:50:06Z" finished-at="2021-05-01T12:50:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="beforeMethod" is-config="true" duration-ms="778" started-at="2021-05-01T12:50:06Z" finished-at="2021-05-01T12:50:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="readRestrictedCollection()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="readRestrictedCollection" duration-ms="5" started-at="2021-05-01T12:50:07Z" finished-at="2021-05-01T12:50:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- readRestrictedCollection -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="afterMethod" is-config="true" duration-ms="219" started-at="2021-05-01T12:50:07Z" finished-at="2021-05-01T12:50:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="beforeMethod" is-config="true" duration-ms="618" started-at="2021-05-01T12:50:07Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="update()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="update" duration-ms="5" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- update -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@631330c]" name="afterMethod" is-config="true" duration-ms="202" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.customsql.CustomSQL -->
    </test> <!-- Custom SQL -->
    <test name="Serialization" duration-ms="0" started-at="2021-05-01T09:50:08Z" finished-at="2021-05-01T09:50:08Z">
    </test> <!-- Serialization -->
    <test name="Scaling" duration-ms="9344" started-at="2021-05-01T09:50:08Z" finished-at="2021-05-01T09:50:17Z">
      <class name="org.jpwh.test.bulkbatch.BulkStatementsSQL">
        <test-method status="PASS" signature="beforeSuite(java.lang.String, java.lang.String)[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="beforeSuite" is-config="true" duration-ms="161" started-at="2021-05-01T12:47:59Z" finished-at="2021-05-01T12:47:59Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:50:17Z" finished-at="2021-05-01T12:50:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:50:17Z" finished-at="2021-05-01T12:50:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="bulkUpdate" duration-ms="7" started-at="2021-05-01T12:50:17Z" finished-at="2021-05-01T12:50:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdate -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:50:17Z" finished-at="2021-05-01T12:50:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="beforeMethod" is-config="true" duration-ms="78" started-at="2021-05-01T12:50:17Z" finished-at="2021-05-01T12:50:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="bulkUpdateHibernate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="bulkUpdateHibernate" duration-ms="7" started-at="2021-05-01T12:50:17Z" finished-at="2021-05-01T12:50:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdateHibernate -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:50:17Z" finished-at="2021-05-01T12:50:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@4923ab24]" name="afterSuite" is-config="true" duration-ms="259" started-at="2021-05-01T12:50:17Z" finished-at="2021-05-01T12:50:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- org.jpwh.test.bulkbatch.BulkStatementsSQL -->
      <class name="org.jpwh.test.bulkbatch.BatchInsertUpdate">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@44c8afef]" name="beforeMethod" is-config="true" duration-ms="79" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@44c8afef]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="batchInsertUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@44c8afef]" name="batchInsertUpdate" duration-ms="4227" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- batchInsertUpdate -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@44c8afef]" name="afterMethod" is-config="true" duration-ms="30" started-at="2021-05-01T12:50:14Z" finished-at="2021-05-01T12:50:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@44c8afef]" name="beforeMethod" is-config="true" duration-ms="85" started-at="2021-05-01T12:50:14Z" finished-at="2021-05-01T12:50:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="batchInsertUpdateWithStatelessSession()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@44c8afef]" name="batchInsertUpdateWithStatelessSession" duration-ms="2770" started-at="2021-05-01T12:50:14Z" finished-at="2021-05-01T12:50:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- batchInsertUpdateWithStatelessSession -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@44c8afef]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:50:17Z" finished-at="2021-05-01T12:50:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.bulkbatch.BatchInsertUpdate -->
      <class name="org.jpwh.test.bulkbatch.BulkStatementsJPQL">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="beforeMethod" is-config="true" duration-ms="90" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="bulkDelete()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="bulkDelete" duration-ms="17" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <exception class="javax.persistence.EntityNotFoundException">
            <message>
              <![CDATA[No row with the given identifier exists: [org.jpwh.model.bulkbatch.CreditCard#302]]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.EntityNotFoundException: No row with the given identifier exists: [org.jpwh.model.bulkbatch.CreditCard#302]
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1674)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1619)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.refresh(AbstractEntityManagerImpl.java:1234)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.refresh(AbstractEntityManagerImpl.java:1192)
	at org.jpwh.test.bulkbatch.BulkStatementsJPQL.bulkDelete(BulkStatementsJPQL.java:214)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.EntityNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkDelete -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="beforeMethod" is-config="true" duration-ms="93" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="bulkInsert()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="bulkInsert" duration-ms="18" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkInsert -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="beforeMethod" is-config="true" duration-ms="150" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="bulkUpdate" duration-ms="9" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdate -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="afterMethod" is-config="true" duration-ms="37" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="beforeMethod" is-config="true" duration-ms="154" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="bulkUpdateInheritance()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="bulkUpdateInheritance" duration-ms="10" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdateInheritance -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="afterMethod" is-config="true" duration-ms="28" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="beforeMethod" is-config="true" duration-ms="81" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="bulkUpdateVersioned()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="bulkUpdateVersioned" duration-ms="7" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdateVersioned -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@46daef40]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.bulkbatch.BulkStatementsJPQL -->
      <class name="org.jpwh.test.cache.SecondLevel">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="beforeMethod" is-config="true" duration-ms="192" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="cacheBehavior()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="cacheBehavior" duration-ms="32" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheBehavior -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="cacheControl()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="cacheControl" duration-ms="11" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheControl -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="beforeMethod" is-config="true" duration-ms="79" started-at="2021-05-01T12:50:08Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="cacheModes()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="cacheModes" duration-ms="12" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheModes -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="afterMethod" is-config="true" duration-ms="112" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="beforeMethod" is-config="true" duration-ms="76" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="cacheNaturalId()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="cacheNaturalId" duration-ms="11" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheNaturalId -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="beforeMethod" is-config="true" duration-ms="73" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="cacheQueryResults()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="cacheQueryResults" duration-ms="12" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheQueryResults -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@13c27452]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:50:09Z" finished-at="2021-05-01T12:50:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.cache.SecondLevel -->
      <class name="org.jpwh.test.bulkbatch.BulkStatementsCriteria">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="beforeMethod" is-config="true" duration-ms="79" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="beforeClass" is-config="true" duration-ms="0" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="bulkDelete()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="bulkDelete" duration-ms="9" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <exception class="javax.persistence.EntityNotFoundException">
            <message>
              <![CDATA[No row with the given identifier exists: [org.jpwh.model.bulkbatch.CreditCard#302]]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.EntityNotFoundException: No row with the given identifier exists: [org.jpwh.model.bulkbatch.CreditCard#302]
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1674)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1619)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.refresh(AbstractEntityManagerImpl.java:1234)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.refresh(AbstractEntityManagerImpl.java:1192)
	at org.jpwh.test.bulkbatch.BulkStatementsCriteria.bulkDelete(BulkStatementsCriteria.java:219)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.EntityNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkDelete -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="afterMethod" is-config="true" duration-ms="27" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="bulkUpdate" duration-ms="8" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdate -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="afterMethod" is-config="true" duration-ms="25" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="beforeMethod" is-config="true" duration-ms="77" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="bulkUpdateVersioned()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="bulkUpdateVersioned" duration-ms="7" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdateVersioned -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@12f41634]" name="afterMethod" is-config="true" duration-ms="26" started-at="2021-05-01T12:50:10Z" finished-at="2021-05-01T12:50:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.bulkbatch.BulkStatementsCriteria -->
    </test> <!-- Scaling -->
  </suite> <!-- AllTests - examples -->
</testng-results>
